option HAS_DIFFUSE_TEXTURE: bool;
option HAS_ALPHA_TEXTURE: bool;
option ALPHA_TEST: bool;

const HasUV = HAS_DIFFUSE_TEXTURE || HAS_ALPHA_TEXTURE;

[layout(std140)]
struct BasicSettings
{
	AlphaThreshold: f32,
	DiffuseColor: vec4<f32>
}

[layout(std140)]
struct InstanceData
{
	worldMatrix: mat4<f32>,
	invWorldMatrix: mat4<f32>
}

[layout(std140)]
struct ViewerData
{
	projectionMatrix: mat4<f32>,
	invProjectionMatrix: mat4<f32>,
	viewMatrix: mat4<f32>,
	invViewMatrix: mat4<f32>,
	viewProjMatrix: mat4<f32>,
	invViewProjMatrix: mat4<f32>,
	renderTargetSize: vec2<f32>,
	invRenderTargetSize: vec2<f32>,
	eyePosition: vec3<f32>
}

external
{
	[set(0), binding(0)] viewerData: uniform<ViewerData>,
	[set(1), binding(0)] instanceData: uniform<InstanceData>,
	[set(2), binding(0)] settings: uniform<BasicSettings>,
	[set(2), binding(2)] MaterialAlphaMap: sampler2D<f32>,
	[set(2), binding(1)] MaterialDiffuseMap: sampler2D<f32>
}

// Fragment stage
struct FragIn
{
	[location(0), cond(HasUV)] uv: vec2<f32>
}

struct FragOut
{
	[location(0)] RenderTarget0: vec4<f32>
}

[entry(frag)]
fn main(input: FragIn) -> FragOut
{
	let output: FragOut;
	let diffuseColor = select_opt(HAS_DIFFUSE_TEXTURE, MaterialDiffuseMap.Sample(input.uv) * settings.DiffuseColor, settings.DiffuseColor);
	let diffuseColor = select_opt(HAS_ALPHA_TEXTURE, vec4<f32>(diffuseColor.x, diffuseColor.y, diffuseColor.z, ((MaterialAlphaMap.Sample(input.uv)).x) * diffuseColor.w), diffuseColor);

	if (select_opt(ALPHA_TEST, diffuseColor.w < settings.AlphaThreshold, false))
		discard;

	output.RenderTarget0 = diffuseColor;
	return output;
}

// Vertex stage
struct VertIn
{
	[location(0)] pos: vec3<f32>,
	[location(1), cond(HasUV)] uv: vec2<f32>
}

struct VertOut
{
	[location(0), cond(HasUV)] uv: vec2<f32>,
	[builtin(position)] position: vec4<f32>
}

[entry(vert)]
fn main(input: VertIn) -> VertOut
{
	let output: VertOut;
	output.position = viewerData.projectionMatrix * viewerData.viewMatrix * instanceData.worldMatrix * vec4<f32>(input.pos, 1.0);

	const if (HasUV)
		output.uv = input.uv;

	return output;
}
