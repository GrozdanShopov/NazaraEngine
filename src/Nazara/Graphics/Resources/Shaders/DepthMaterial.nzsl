[nzsl_version("1.0")]
module DepthMaterial;

import InstanceData from Engine.InstanceData;
import SkeletalData from Engine.SkeletalData;
import ViewerData from Engine.ViewerData;

option HasBaseColorTexture: bool = false;
option HasAlphaTexture: bool = false;
option AlphaTest: bool = false;

option PosLocation: i32;
option UvLocation: i32 = -1;
option JointIndicesLocation: i32 = -1;
option JointWeightsLocation: i32 = -1;

const HasUV = AlphaTest && (HasBaseColorTexture || HasAlphaTexture);
const HasSkinning = (JointIndicesLocation >= 0 && JointWeightsLocation >= 0);

[layout(std140)]
struct BasicSettings
{
	AlphaThreshold: f32,
	BaseColor: vec4[f32]
}

external
{
	[binding(0)] settings: uniform[BasicSettings],
	[binding(1)] MaterialBaseColorMap: sampler2D[f32],
	[binding(2)] MaterialAlphaMap: sampler2D[f32],
	[binding(3)] TextureOverlay: sampler2D[f32],
	[binding(4)] instanceData: uniform[InstanceData],
	[binding(5)] viewerData: uniform[ViewerData],
	[binding(6)] skeletalData: uniform[SkeletalData]
}

// Fragment stage
struct FragIn
{
	[location(0), cond(HasUV)] uv: vec2[f32]
}

[entry(frag), cond(AlphaTest)]
fn main(input: FragIn)
{
	let alpha = settings.BaseColor.a;

	const if (HasUV)
		alpha *= TextureOverlay.Sample(input.uv).a;

	const if (HasBaseColorTexture)
		alpha *= MaterialBaseColorMap.Sample(input.uv).a;

	const if (HasAlphaTexture)
		alpha *= MaterialAlphaMap.Sample(input.uv).x;

	if (alpha < settings.AlphaThreshold)
		discard;
}

// Dummy fragment shader (TODO: Add a way to delete stage?)
[entry(frag), cond(!AlphaTest)]
fn main() {}

// Vertex stage
struct VertIn
{
	[location(PosLocation)] pos: vec3[f32],

	[cond(HasUV), location(UvLocation)] 
	uv: vec2[f32],

	[cond(HasSkinning), location(JointIndicesLocation)]
	jointIndices: vec4[i32],

	[cond(HasSkinning), location(JointWeightsLocation)]
	jointWeights: vec4[f32],
}

struct VertOut
{
	[location(0), cond(HasUV)] uv: vec2[f32],
	[builtin(position)] position: vec4[f32]
}

[entry(vert)]
fn main(input: VertIn) -> VertOut
{
	let pos: vec3[f32];
	const if (HasSkinning)
	{
		pos = vec3[f32](0.0, 0.0, 0.0);

		[unroll]
		for i in 0 -> 4
		{
			let jointIndex = input.jointIndices[i];
			let jointWeight = input.jointWeights[i];

			let jointMatrix = skeletalData.JointMatrices[jointIndex];
			pos += (jointMatrix * vec4[f32](input.pos, 1.0)).xyz * jointWeight;
		}
	}
	else
		pos = input.pos;

	let worldPosition = instanceData.worldMatrix * vec4[f32](pos, 1.0);

	let output: VertOut;
	output.position = viewerData.viewProjMatrix * worldPosition;

	const if (HasUV)
		output.uv = input.uv;

	return output;
}
